// source: spec.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.nogui.spec.Action', null, global);
goog.exportSymbol('proto.nogui.spec.Action.TypeCase', null, global);
goog.exportSymbol('proto.nogui.spec.Dialog', null, global);
goog.exportSymbol('proto.nogui.spec.Dialog.TypeCase', null, global);
goog.exportSymbol('proto.nogui.spec.Icon', null, global);
goog.exportSymbol('proto.nogui.spec.Repeat', null, global);
goog.exportSymbol('proto.nogui.spec.Repeat.TypeCase', null, global);
goog.exportSymbol('proto.nogui.spec.Spec', null, global);
goog.exportSymbol('proto.nogui.spec.Switch', null, global);
goog.exportSymbol('proto.nogui.spec.Table', null, global);
goog.exportSymbol('proto.nogui.spec.Text', null, global);
goog.exportSymbol('proto.nogui.spec.Text.TypeCase', null, global);
goog.exportSymbol('proto.nogui.spec.Use', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nogui.spec.Spec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nogui.spec.Spec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nogui.spec.Spec.displayName = 'proto.nogui.spec.Spec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nogui.spec.Icon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nogui.spec.Icon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nogui.spec.Icon.displayName = 'proto.nogui.spec.Icon';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nogui.spec.Dialog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nogui.spec.Dialog.oneofGroups_);
};
goog.inherits(proto.nogui.spec.Dialog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nogui.spec.Dialog.displayName = 'proto.nogui.spec.Dialog';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nogui.spec.Text = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nogui.spec.Text.oneofGroups_);
};
goog.inherits(proto.nogui.spec.Text, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nogui.spec.Text.displayName = 'proto.nogui.spec.Text';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nogui.spec.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nogui.spec.Action.oneofGroups_);
};
goog.inherits(proto.nogui.spec.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nogui.spec.Action.displayName = 'proto.nogui.spec.Action';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nogui.spec.Use = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nogui.spec.Use, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nogui.spec.Use.displayName = 'proto.nogui.spec.Use';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nogui.spec.Repeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nogui.spec.Repeat.oneofGroups_);
};
goog.inherits(proto.nogui.spec.Repeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nogui.spec.Repeat.displayName = 'proto.nogui.spec.Repeat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nogui.spec.Switch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nogui.spec.Switch.repeatedFields_, null);
};
goog.inherits(proto.nogui.spec.Switch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nogui.spec.Switch.displayName = 'proto.nogui.spec.Switch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nogui.spec.Table = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nogui.spec.Table, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nogui.spec.Table.displayName = 'proto.nogui.spec.Table';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nogui.spec.Spec.prototype.toObject = function(opt_includeInstance) {
  return proto.nogui.spec.Spec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nogui.spec.Spec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nogui.spec.Spec.toObject = function(includeInstance, msg) {
  var f, obj = {
    iconsMap: (f = msg.getIconsMap()) ? f.toObject(includeInstance, proto.nogui.spec.Icon.toObject) : [],
    dialogsMap: (f = msg.getDialogsMap()) ? f.toObject(includeInstance, proto.nogui.spec.Dialog.toObject) : [],
    partsMap: (f = msg.getPartsMap()) ? f.toObject(includeInstance, proto.google.protobuf.Any.toObject) : [],
    viewsMap: (f = msg.getViewsMap()) ? f.toObject(includeInstance, proto.google.protobuf.Any.toObject) : [],
    main: jspb.Message.getFieldWithDefault(msg, 20, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nogui.spec.Spec}
 */
proto.nogui.spec.Spec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nogui.spec.Spec;
  return proto.nogui.spec.Spec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nogui.spec.Spec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nogui.spec.Spec}
 */
proto.nogui.spec.Spec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = msg.getIconsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.nogui.spec.Icon.deserializeBinaryFromReader, "", new proto.nogui.spec.Icon());
         });
      break;
    case 11:
      var value = msg.getDialogsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.nogui.spec.Dialog.deserializeBinaryFromReader, "", new proto.nogui.spec.Dialog());
         });
      break;
    case 12:
      var value = msg.getPartsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Any.deserializeBinaryFromReader, "", new proto.google.protobuf.Any());
         });
      break;
    case 13:
      var value = msg.getViewsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Any.deserializeBinaryFromReader, "", new proto.google.protobuf.Any());
         });
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setMain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nogui.spec.Spec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nogui.spec.Spec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nogui.spec.Spec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nogui.spec.Spec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIconsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.nogui.spec.Icon.serializeBinaryToWriter);
  }
  f = message.getDialogsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.nogui.spec.Dialog.serializeBinaryToWriter);
  }
  f = message.getPartsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(12, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Any.serializeBinaryToWriter);
  }
  f = message.getViewsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(13, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Any.serializeBinaryToWriter);
  }
  f = message.getMain();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
};


/**
 * map<string, Icon> icons = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.nogui.spec.Icon>}
 */
proto.nogui.spec.Spec.prototype.getIconsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.nogui.spec.Icon>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      proto.nogui.spec.Icon));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nogui.spec.Spec} returns this
 */
proto.nogui.spec.Spec.prototype.clearIconsMap = function() {
  this.getIconsMap().clear();
  return this;};


/**
 * map<string, Dialog> dialogs = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.nogui.spec.Dialog>}
 */
proto.nogui.spec.Spec.prototype.getDialogsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.nogui.spec.Dialog>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      proto.nogui.spec.Dialog));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nogui.spec.Spec} returns this
 */
proto.nogui.spec.Spec.prototype.clearDialogsMap = function() {
  this.getDialogsMap().clear();
  return this;};


/**
 * map<string, google.protobuf.Any> parts = 12;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Any>}
 */
proto.nogui.spec.Spec.prototype.getPartsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Any>} */ (
      jspb.Message.getMapField(this, 12, opt_noLazyCreate,
      proto.google.protobuf.Any));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nogui.spec.Spec} returns this
 */
proto.nogui.spec.Spec.prototype.clearPartsMap = function() {
  this.getPartsMap().clear();
  return this;};


/**
 * map<string, google.protobuf.Any> views = 13;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Any>}
 */
proto.nogui.spec.Spec.prototype.getViewsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Any>} */ (
      jspb.Message.getMapField(this, 13, opt_noLazyCreate,
      proto.google.protobuf.Any));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nogui.spec.Spec} returns this
 */
proto.nogui.spec.Spec.prototype.clearViewsMap = function() {
  this.getViewsMap().clear();
  return this;};


/**
 * optional string main = 20;
 * @return {string}
 */
proto.nogui.spec.Spec.prototype.getMain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.nogui.spec.Spec} returns this
 */
proto.nogui.spec.Spec.prototype.setMain = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nogui.spec.Icon.prototype.toObject = function(opt_includeInstance) {
  return proto.nogui.spec.Icon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nogui.spec.Icon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nogui.spec.Icon.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nogui.spec.Icon}
 */
proto.nogui.spec.Icon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nogui.spec.Icon;
  return proto.nogui.spec.Icon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nogui.spec.Icon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nogui.spec.Icon}
 */
proto.nogui.spec.Icon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nogui.spec.Icon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nogui.spec.Icon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nogui.spec.Icon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nogui.spec.Icon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.nogui.spec.Icon.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nogui.spec.Icon} returns this
 */
proto.nogui.spec.Icon.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nogui.spec.Dialog.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.nogui.spec.Dialog.TypeCase = {
  TYPE_NOT_SET: 0,
  INFO: 1,
  ASK: 2
};

/**
 * @return {proto.nogui.spec.Dialog.TypeCase}
 */
proto.nogui.spec.Dialog.prototype.getTypeCase = function() {
  return /** @type {proto.nogui.spec.Dialog.TypeCase} */(jspb.Message.computeOneofCase(this, proto.nogui.spec.Dialog.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nogui.spec.Dialog.prototype.toObject = function(opt_includeInstance) {
  return proto.nogui.spec.Dialog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nogui.spec.Dialog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nogui.spec.Dialog.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ask: jspb.Message.getFieldWithDefault(msg, 2, ""),
    file: jspb.Message.getFieldWithDefault(msg, 5, ""),
    call: jspb.Message.getFieldWithDefault(msg, 11, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 20, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nogui.spec.Dialog}
 */
proto.nogui.spec.Dialog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nogui.spec.Dialog;
  return proto.nogui.spec.Dialog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nogui.spec.Dialog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nogui.spec.Dialog}
 */
proto.nogui.spec.Dialog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsk(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFile(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCall(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nogui.spec.Dialog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nogui.spec.Dialog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nogui.spec.Dialog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nogui.spec.Dialog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFile();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCall();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
};


/**
 * optional string info = 1;
 * @return {string}
 */
proto.nogui.spec.Dialog.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nogui.spec.Dialog} returns this
 */
proto.nogui.spec.Dialog.prototype.setInfo = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.nogui.spec.Dialog.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nogui.spec.Dialog} returns this
 */
proto.nogui.spec.Dialog.prototype.clearInfo = function() {
  return jspb.Message.setOneofField(this, 1, proto.nogui.spec.Dialog.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nogui.spec.Dialog.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string ask = 2;
 * @return {string}
 */
proto.nogui.spec.Dialog.prototype.getAsk = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nogui.spec.Dialog} returns this
 */
proto.nogui.spec.Dialog.prototype.setAsk = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.nogui.spec.Dialog.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nogui.spec.Dialog} returns this
 */
proto.nogui.spec.Dialog.prototype.clearAsk = function() {
  return jspb.Message.setOneofField(this, 2, proto.nogui.spec.Dialog.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nogui.spec.Dialog.prototype.hasAsk = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string file = 5;
 * @return {string}
 */
proto.nogui.spec.Dialog.prototype.getFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.nogui.spec.Dialog} returns this
 */
proto.nogui.spec.Dialog.prototype.setFile = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string call = 11;
 * @return {string}
 */
proto.nogui.spec.Dialog.prototype.getCall = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.nogui.spec.Dialog} returns this
 */
proto.nogui.spec.Dialog.prototype.setCall = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string icon = 20;
 * @return {string}
 */
proto.nogui.spec.Dialog.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.nogui.spec.Dialog} returns this
 */
proto.nogui.spec.Dialog.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nogui.spec.Text.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.nogui.spec.Text.TypeCase = {
  TYPE_NOT_SET: 0,
  TEXT: 1,
  TITLE: 2
};

/**
 * @return {proto.nogui.spec.Text.TypeCase}
 */
proto.nogui.spec.Text.prototype.getTypeCase = function() {
  return /** @type {proto.nogui.spec.Text.TypeCase} */(jspb.Message.computeOneofCase(this, proto.nogui.spec.Text.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nogui.spec.Text.prototype.toObject = function(opt_includeInstance) {
  return proto.nogui.spec.Text.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nogui.spec.Text} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nogui.spec.Text.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    vis: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nogui.spec.Text}
 */
proto.nogui.spec.Text.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nogui.spec.Text;
  return proto.nogui.spec.Text.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nogui.spec.Text} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nogui.spec.Text}
 */
proto.nogui.spec.Text.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nogui.spec.Text.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nogui.spec.Text.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nogui.spec.Text} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nogui.spec.Text.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVis();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.nogui.spec.Text.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nogui.spec.Text} returns this
 */
proto.nogui.spec.Text.prototype.setText = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.nogui.spec.Text.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nogui.spec.Text} returns this
 */
proto.nogui.spec.Text.prototype.clearText = function() {
  return jspb.Message.setOneofField(this, 1, proto.nogui.spec.Text.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nogui.spec.Text.prototype.hasText = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.nogui.spec.Text.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nogui.spec.Text} returns this
 */
proto.nogui.spec.Text.prototype.setTitle = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.nogui.spec.Text.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nogui.spec.Text} returns this
 */
proto.nogui.spec.Text.prototype.clearTitle = function() {
  return jspb.Message.setOneofField(this, 2, proto.nogui.spec.Text.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nogui.spec.Text.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string vis = 3;
 * @return {string}
 */
proto.nogui.spec.Text.prototype.getVis = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nogui.spec.Text} returns this
 */
proto.nogui.spec.Text.prototype.setVis = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nogui.spec.Action.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.nogui.spec.Action.TypeCase = {
  TYPE_NOT_SET: 0,
  ACT: 1,
  ACTION: 2
};

/**
 * @return {proto.nogui.spec.Action.TypeCase}
 */
proto.nogui.spec.Action.prototype.getTypeCase = function() {
  return /** @type {proto.nogui.spec.Action.TypeCase} */(jspb.Message.computeOneofCase(this, proto.nogui.spec.Action.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nogui.spec.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.nogui.spec.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nogui.spec.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nogui.spec.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    act: jspb.Message.getFieldWithDefault(msg, 1, ""),
    action: jspb.Message.getFieldWithDefault(msg, 2, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 3, ""),
    vis: jspb.Message.getFieldWithDefault(msg, 4, ""),
    view: jspb.Message.getFieldWithDefault(msg, 5, ""),
    call: jspb.Message.getFieldWithDefault(msg, 6, ""),
    dialog: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nogui.spec.Action}
 */
proto.nogui.spec.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nogui.spec.Action;
  return proto.nogui.spec.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nogui.spec.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nogui.spec.Action}
 */
proto.nogui.spec.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAct(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVis(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setView(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCall(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDialog(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nogui.spec.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nogui.spec.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nogui.spec.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nogui.spec.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVis();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getView();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCall();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDialog();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string act = 1;
 * @return {string}
 */
proto.nogui.spec.Action.prototype.getAct = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nogui.spec.Action} returns this
 */
proto.nogui.spec.Action.prototype.setAct = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.nogui.spec.Action.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nogui.spec.Action} returns this
 */
proto.nogui.spec.Action.prototype.clearAct = function() {
  return jspb.Message.setOneofField(this, 1, proto.nogui.spec.Action.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nogui.spec.Action.prototype.hasAct = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string action = 2;
 * @return {string}
 */
proto.nogui.spec.Action.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nogui.spec.Action} returns this
 */
proto.nogui.spec.Action.prototype.setAction = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.nogui.spec.Action.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nogui.spec.Action} returns this
 */
proto.nogui.spec.Action.prototype.clearAction = function() {
  return jspb.Message.setOneofField(this, 2, proto.nogui.spec.Action.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nogui.spec.Action.prototype.hasAction = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string icon = 3;
 * @return {string}
 */
proto.nogui.spec.Action.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nogui.spec.Action} returns this
 */
proto.nogui.spec.Action.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string vis = 4;
 * @return {string}
 */
proto.nogui.spec.Action.prototype.getVis = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.nogui.spec.Action} returns this
 */
proto.nogui.spec.Action.prototype.setVis = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string view = 5;
 * @return {string}
 */
proto.nogui.spec.Action.prototype.getView = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.nogui.spec.Action} returns this
 */
proto.nogui.spec.Action.prototype.setView = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string call = 6;
 * @return {string}
 */
proto.nogui.spec.Action.prototype.getCall = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.nogui.spec.Action} returns this
 */
proto.nogui.spec.Action.prototype.setCall = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string dialog = 7;
 * @return {string}
 */
proto.nogui.spec.Action.prototype.getDialog = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.nogui.spec.Action} returns this
 */
proto.nogui.spec.Action.prototype.setDialog = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nogui.spec.Use.prototype.toObject = function(opt_includeInstance) {
  return proto.nogui.spec.Use.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nogui.spec.Use} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nogui.spec.Use.toObject = function(includeInstance, msg) {
  var f, obj = {
    use: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nogui.spec.Use}
 */
proto.nogui.spec.Use.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nogui.spec.Use;
  return proto.nogui.spec.Use.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nogui.spec.Use} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nogui.spec.Use}
 */
proto.nogui.spec.Use.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nogui.spec.Use.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nogui.spec.Use.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nogui.spec.Use} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nogui.spec.Use.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUse();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string use = 1;
 * @return {string}
 */
proto.nogui.spec.Use.prototype.getUse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nogui.spec.Use} returns this
 */
proto.nogui.spec.Use.prototype.setUse = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nogui.spec.Repeat.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.nogui.spec.Repeat.TypeCase = {
  TYPE_NOT_SET: 0,
  ITEM: 2,
  USE: 3
};

/**
 * @return {proto.nogui.spec.Repeat.TypeCase}
 */
proto.nogui.spec.Repeat.prototype.getTypeCase = function() {
  return /** @type {proto.nogui.spec.Repeat.TypeCase} */(jspb.Message.computeOneofCase(this, proto.nogui.spec.Repeat.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nogui.spec.Repeat.prototype.toObject = function(opt_includeInstance) {
  return proto.nogui.spec.Repeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nogui.spec.Repeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nogui.spec.Repeat.toObject = function(includeInstance, msg) {
  var f, obj = {
    repeat: jspb.Message.getFieldWithDefault(msg, 1, ""),
    item: (f = msg.getItem()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    use: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nogui.spec.Repeat}
 */
proto.nogui.spec.Repeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nogui.spec.Repeat;
  return proto.nogui.spec.Repeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nogui.spec.Repeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nogui.spec.Repeat}
 */
proto.nogui.spec.Repeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRepeat(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setItem(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nogui.spec.Repeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nogui.spec.Repeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nogui.spec.Repeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nogui.spec.Repeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRepeat();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getItem();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string repeat = 1;
 * @return {string}
 */
proto.nogui.spec.Repeat.prototype.getRepeat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nogui.spec.Repeat} returns this
 */
proto.nogui.spec.Repeat.prototype.setRepeat = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Any item = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.nogui.spec.Repeat.prototype.getItem = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.nogui.spec.Repeat} returns this
*/
proto.nogui.spec.Repeat.prototype.setItem = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.nogui.spec.Repeat.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nogui.spec.Repeat} returns this
 */
proto.nogui.spec.Repeat.prototype.clearItem = function() {
  return this.setItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nogui.spec.Repeat.prototype.hasItem = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string use = 3;
 * @return {string}
 */
proto.nogui.spec.Repeat.prototype.getUse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nogui.spec.Repeat} returns this
 */
proto.nogui.spec.Repeat.prototype.setUse = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.nogui.spec.Repeat.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nogui.spec.Repeat} returns this
 */
proto.nogui.spec.Repeat.prototype.clearUse = function() {
  return jspb.Message.setOneofField(this, 3, proto.nogui.spec.Repeat.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nogui.spec.Repeat.prototype.hasUse = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nogui.spec.Switch.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nogui.spec.Switch.prototype.toObject = function(opt_includeInstance) {
  return proto.nogui.spec.Switch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nogui.spec.Switch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nogui.spec.Switch.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_switch: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bind: jspb.Message.getFieldWithDefault(msg, 2, ""),
    iconsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nogui.spec.Switch}
 */
proto.nogui.spec.Switch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nogui.spec.Switch;
  return proto.nogui.spec.Switch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nogui.spec.Switch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nogui.spec.Switch}
 */
proto.nogui.spec.Switch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSwitch(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBind(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addIcons(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nogui.spec.Switch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nogui.spec.Switch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nogui.spec.Switch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nogui.spec.Switch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSwitch();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBind();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIconsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string switch = 1;
 * @return {string}
 */
proto.nogui.spec.Switch.prototype.getSwitch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nogui.spec.Switch} returns this
 */
proto.nogui.spec.Switch.prototype.setSwitch = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string bind = 2;
 * @return {string}
 */
proto.nogui.spec.Switch.prototype.getBind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nogui.spec.Switch} returns this
 */
proto.nogui.spec.Switch.prototype.setBind = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string icons = 3;
 * @return {!Array<string>}
 */
proto.nogui.spec.Switch.prototype.getIconsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.nogui.spec.Switch} returns this
 */
proto.nogui.spec.Switch.prototype.setIconsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.nogui.spec.Switch} returns this
 */
proto.nogui.spec.Switch.prototype.addIcons = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nogui.spec.Switch} returns this
 */
proto.nogui.spec.Switch.prototype.clearIconsList = function() {
  return this.setIconsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nogui.spec.Table.prototype.toObject = function(opt_includeInstance) {
  return proto.nogui.spec.Table.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nogui.spec.Table} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nogui.spec.Table.toObject = function(includeInstance, msg) {
  var f, obj = {
    table: (f = msg.getTable()) && proto.nogui.spec.Repeat.toObject(includeInstance, f),
    title: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nogui.spec.Table}
 */
proto.nogui.spec.Table.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nogui.spec.Table;
  return proto.nogui.spec.Table.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nogui.spec.Table} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nogui.spec.Table}
 */
proto.nogui.spec.Table.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nogui.spec.Repeat;
      reader.readMessage(value,proto.nogui.spec.Repeat.deserializeBinaryFromReader);
      msg.setTable(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nogui.spec.Table.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nogui.spec.Table.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nogui.spec.Table} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nogui.spec.Table.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTable();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nogui.spec.Repeat.serializeBinaryToWriter
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Repeat table = 1;
 * @return {?proto.nogui.spec.Repeat}
 */
proto.nogui.spec.Table.prototype.getTable = function() {
  return /** @type{?proto.nogui.spec.Repeat} */ (
    jspb.Message.getWrapperField(this, proto.nogui.spec.Repeat, 1));
};


/**
 * @param {?proto.nogui.spec.Repeat|undefined} value
 * @return {!proto.nogui.spec.Table} returns this
*/
proto.nogui.spec.Table.prototype.setTable = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nogui.spec.Table} returns this
 */
proto.nogui.spec.Table.prototype.clearTable = function() {
  return this.setTable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nogui.spec.Table.prototype.hasTable = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.nogui.spec.Table.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nogui.spec.Table} returns this
 */
proto.nogui.spec.Table.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.nogui.spec);
